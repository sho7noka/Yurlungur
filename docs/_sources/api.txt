===================================
API Foundation
===================================
Yurlungur foundations.

基本となるコンセプトはPythonAPIによるシュガーシンタックスのインターフェースです。
Object(Node) クラス、Attribute クラス、File クラスを知れば
基本的な操作は全てできる設計になっています。


Chapters:

.. toctree::
    :maxdepth: 2

    yurlungur.rst



Object & Node
--------------------------------
APIのレベルでは、ノードベースとスタックベースに分けます。
スタックベースのアプリケーションを使う際には YObject
ノードというのはつなぐものであり、あと

UnityはComponent BlenderはModifierでオブジェクトの振る舞いを制御しますが、
Maya や Houdini といったノードベースのアプリケーションでは、接続する同士の相互作用によって

アプリケーションが持つ性質を意識して Node か Object を使ってプログラミングすると良いでしょう。


.. code-block:: python

    # 標準ではPython
    import yurlungur as yr

    obj = yr.YObject("defaultResolution")

    # or

    node = yr.YNode("defaultResolution")


YNode is eble to initialize that is subclass for YObject.
You have to str object.
Node オブジェクトのみ connection 関係のメソッドを複数持つ

.. code-block:: python

    node = yr.YNode(obj.name)



Attribute
--------------------------------
Object based container.
これはPyMEL をベースにした柔軟なAttributeクラスです。

getter / setter のインターフェースは、アプリケーション間ですべて違います。
attr("str") は文字列ベースのアクセスになるので、予め文字列要素で構成した
リストを準備すれば短く書くことができるでしょう。

.. code-block:: python

    width = obj.attr("width") # object YAttr

    # or

    width = obj.width


    yr.log(width.value)

    width.set(700)


__getitem__ によるアクセスもサポートしているため、
ユーザー側が今操作しているオブジェクトの状態を気にすることなく
はじめからそのプロパティを持っていたかのように振る舞います。


File
--------------------------------
今のスタンダードはストリームですが、
ファイルIOを一つのインターフェースでまとめておくことは、
どのアプリケーションを使う上でも役に立つものでしょう。

.. code-block:: python

    yurlungur.file



Alembic や FBX など汎用ファイルフォーマットのサポートは
アプリケーションに依存します。staticベースによる実装が
yurlungur.command モジュールにまとめられています。


基本となるAPIはここで終わりです。