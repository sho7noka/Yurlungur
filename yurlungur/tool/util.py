from __future__ import absolute_import, division
import sys
import os
import string
import itertools
import traceback
import functools
import time
import json
import inspect
import cProfile

try:
    import unicode
except:
    unicode = str


def _pyc():
    sys.dont_write_bytecode = True


# class MyStr(string):
#     @staticmethod
#     def replace(self):
#         return self.replace(os.sep, "/")
#
# print MyStr("G\tool_test\ciWildernessA\d").replace()

def _replace(self):
    return self.replace(os.sep, "/")


nopyc = _pyc
strs = string
strs.replace = _replace


def iter(l0, l1):
    """shallow iteration"""

    for a, b in itertools.product(l0, l1):
        yield (a, b)


def make_completer(mod):
    header = "\"\"\"this document generated by internal module.\"\"\"\n\n\n"

    local = os.path.dirname(os.path.dirname(inspect.currentframe().f_code.co_filename))
    completer = os.path.join(local, "user", "completer.pyi").replace(os.sep, "/")

    with open(completer, "w") as f:
        f.write(header)

        for fn, _ in inspect.getmembers(mod):
            if fn.startswith("_"):
                continue

            f.write("def {0}(*args, **kwargs):\n".format(fn))
            f.write("   \"\"\"{0}\"\"\"\n".format(inspect.getdoc(fn)))
            f.write("   pass\n\n")


def analyze(func):
    @functools.wraps(func)
    def Wrapper(*args, **kw):
        try:
            ret = func(*args, **kw)
            return ret
        except:
            print(traceback.format_exc())
        return

    return Wrapper


def timer(func):
    @functools.wraps(func)
    def Wrapper(*args, **kw):
        print('{0} start'.format(func.__name__))
        start_time = time.clock()
        ret = func(*args, **kw)
        end_time = time.clock()
        print('\n{0}: {1:,f}s'.format("total: ", (end_time - start_time)))
        return ret

    return Wrapper


def jsonify(func):
    json.dump()
